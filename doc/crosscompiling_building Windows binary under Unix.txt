This method should be suitable for any Unix system: Linux, FreeBSD, MacOS X
In writing this guide used by Linux Mint 17.1 (http://linuxmint.com/)
1) Prepare the System for Cross Compilation.

 sudo apt-get install git bison cmake flex g ++ gperf ruby ​​scons libghc-zlib-dev libghc-zlib-bindings-dev

2) Installation of MXE and dependencies
 cd / home / <your name> /
 git clone https://github.com/mxe/mxe.git
 

2.1) gcc
 cd / home / <your name> / mxe
 make gcc zlib

To verify that the installation was successful gcc:
The directory / home / <your name> / mxe / usr / bin to appear i686-w64-mingw32.static-gcc file and i686-w64-mingw32.static-g ++
And when you start ./i686-w64-mingw32.static-gcc -v must be issued
......
Thread model: win32
gcc version 4.9.2 (GCC)

The directory / home / <your name> /mxe/usr/i686-w64-mingw32.static/lib file should be:
libz.a

2.2) Openssl
 
 cd / home / <your name> / mxe
 make openssl

Verify that the installation was successful Openssl:
The directory / home / <your name> /mxe/usr/i686-w64-mingw32.static/lib should see two files
-libssl.a
-libcrypto.a
In mxe / usr / i686-w64-mingw32.static / include folder should appear openssl directory

2.3) Boost

 cd / home / <your name> / mxe
 make boost

Verify that the installation was successful Boost:
In / home / <your name> /mxe/usr/i686-w64-mingw32.static/lib folder files should appear:
-libboost_imyabiblioteki_mt.a (libboost_atomic-mt.a and other similar files)
-libboost_imyabiblioteki_mt-d.a (libboost_atomic-mt-d.a and other similar files)

The directory / home / <your name> /mxe/usr/i686-w64-mingw32.static/include folder should appear boost

2.4) Berkeley DB
-Download http://download.oracle.com/berkeley-db/db-6.0.20.tar.gz
-Raspakuyte In the home folder
-Open The file / home / <your name> /db-6.0.20/src/dbinc/win_db.h
-Change
#include <WinIoCtl.h>
on
#include <winioctl.h>
-Save file
-Open terminal
 cd / home / <your name> /db-6.0.20/build_unix
 export PATH = / home / <your name> / mxe / usr / bin: $ PATH
 ../dist/configure --host = i686-w64-mingw32.static --enable-mingw --enable-cxx --disable-shared --disable-replication
 make

Verify that the installation was successful Berkeley DB:
The directory / home / <your name> /db-6.0.20/build_unix files should appear:
libdb.a
libdb_cxx.a

2.5) qrencode
-Download http://download.sourceforge.net/libpng/libpng-1.6.15.tar.gz?download
-Raspakuyte In the home folder
-Open terminal

 export PATH = / home / <your name> / mxe / usr / bin: $ PATH
 cd / home / <your name> /libpng-1.6.15
 ./configure --host = i686-w64-mingw32.static --disable-shared
 make
 cp .libs / libpng16.a .libs / libpng.a

Check that libpng successfully met:
in the folder / home / <your name> /libpng-1.6.15/.libs file should be:
libpng.a

-Download http://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz
-Raspakuyte In the home folder
-Open terminal
 export PATH = / home / <your name> / mxe / usr / bin: $ PATH
 cd / home / <your name> /qrencode-3.4.4

 LIBS = "../ libpng-1.6.15 / .libs / libpng.a ../mxe/usr/i686-w64-mingw32.static/lib/libz.a" \
 png_CFLAGS = "- I ../ libpng-1.6.15" \
 png_LIBS = "- L ../ libpng-1.6.15 / .libs" \
 ./configure --host = i686-w64-mingw32.static --enable-static --disable-shared --without-tools

 make

Check that qrencode successfully met:
in the folder / home / <your name> /qrencode-3.4.4/.libs file should be:
libqrencode.a

Qt 2.6 and Qt 4 5

Qt 4
-Open terminal

 cd / home / <your name> / mxe
 make qt

Check that Qt4 going wrong:
-Open terminal
-Enter The following commands
 export PATH = / home / <your name> / mxe / usr / bin: $ PATH
 i686-w64-mingw32.static-qmake-qt4 -v

-Must Come back
QMake version 2.01a
Using Qt version 4.8.6 in / home / <your name> /mxe/usr/i686-w64-mingw32.static/qt/lib

Qt 5
-Open terminal

 export PATH = / home / <your name> / mxe / usr / bin: $ PATH
 cd / home / <your name> / mxe
 make qtbase qttools qttranslations

Check that Qt5 going wrong:
-Open terminal
-Enter The following commands
 export PATH = / home / <your name> / mxe / usr / bin: $ PATH
 i686-w64-mingw32.static-qmake-qt5 -v

-Must Come back
QMake version 3.0
Using Qt version 5.4.0 in / home / <your name> /mxe/usr/i686-w64-mingw32.static/qt5/lib

3. Compilation

3.1 Download the source code
-Browse To the home directory
-Open terminal

 git clone https://github.com/PipCoin-project/PipCoin.git

3.2 Putting PipCoind
-Open Makefile.mingw file in a text editor. (When writing instructions used Pluma 1.8.1)
-Vstavte
CC = $ (CROSS) gcc
CXX = $ (CROSS) g ++
-Add Line USE_ASM: = 1
-Pomenyayte Current INCLUDEPATHS, LIBPATHS, LIBS on:

? BOOST_SUFFIX = - mt

INCLUDEPATHS = \
 -I "$ (CURDIR)" \
 -I "/ Home / <your name> /mxe/usr/i686-w64-mingw32.static/include" \
 -I "/ Home / <your name> /" \
 -I "/ Home / <your name> /db-6.0.20/build_unix" \
 
LIBPATHS = \
 -L "$ (CURDIR) / leveldb" \
 -L "/ Home / <your name> /mxe/usr/i686-w64-mingw32.static/lib" \
 -L "/ Home / <your name> /db-6.0.20/build_unix" \

LIBS = \
  -l leveldb \
  -l memenv \
  -l boost_system $ (BOOST_SUFFIX) \
  -l boost_filesystem $ (BOOST_SUFFIX) \
  -l boost_program_options $ (BOOST_SUFFIX) \
  -l boost_thread $ (BOOST_SUFFIX) \
  -l boost_chrono $ (BOOST_SUFFIX) \
  -l db_cxx \
  -l ssl \
  -l crypto \
  -l z
-Pomenyayte LDFLAGS = -Wl, - dynamicbase -Wl, - nxcompat on
LDFLAGS = -Wl, - dynamicbase -Wl, - nxcompat -Wl, - large-address-aware -static

-Pomenyayte In the last lines makefile.mingw
g ++ -c $ (CFLAGS) -o $ @ $ <
on
$ (CXX) $ -c (CFLAGS) -o $ @ $ <

g ++ $ (CFLAGS) $ (LDFLAGS) -o $ @ $ (LIBPATHS) $ ^ $ (LIBS)
on
$ (CXX) $ (CFLAGS) $ (LDFLAGS) -o $ @ $ (LIBPATHS) $ ^ $ (LIBS)

-If You want to use as the unit base LevelDB the change:
USE_LEVELDB: = 0
on
USE_LEVELDB: = 1
(Above USE_IPV6: = 1)
Open the file / home / <your name> / PipCoin / src / leveldb / Makefile
Insert the following lines CXXFLAGS + = -I. -I./include $ (PLATFORM_CXXFLAGS) $ (OPT) the following lines:

CC = $ (CROSS) gcc
CXX = $ (CROSS) g ++
Save the file

Returning to makefile.mingw file, change
cd leveldb; make; cd ..
on
cd leveldb; TARGET_OS = NATIVE_WINDOWS make CROSS = i686-w64-mingw32.static- libleveldb.a libmemenv.a; cd ..

more change
obj / txdb-leveldb.o: leveldb / libleveldb.lib
on
obj / txdb-leveldb.o: leveldb / libleveldb.a

If you want to use a BerkeleyDB database blocks, then simply remove the line USE_LEVELDB: = 1

Save the changes makefile.mingw file

-Open terminal
cd / home / <your name> / PipCoin / src
export PATH = / home / <your name> / mxe / usr / bin: $ PATH
make CROSS = i686-w64-mingw32.static- -f makefile.mingw
strip PipCoind.exe


these messages will be issued during linking:
libboost_thread_win32-mt.a (thread.o): duplicate section `.rdata $ _ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian9bad_monthEEEEE [__ ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian9bad_monthEEEEE] 'has different size
Ignore them. On the performance of the program is not affected


3.3 Putting PipCoin QT

Note: If you want to collect PipCoin Qt with LevelDB, but missed a step with the assembly PipCoind.exe, the
-Change Leveldb Makefile in the directory as well as in paragraph 3.2
-Open Terminal and run the following commands:
export PATH = / home / <your name> / mxe / usr / bin: $ PATH
cd / home / <your name> / PipCoin / src / leveldb
TARGET_OS = NATIVE_WINDOWS make CROSS = i686-w64-mingw32.static- libleveldb.a libmemenv.a;

-Open The file / home / <your name> /PipCoin/PipCoin-qt.pro in a text editor (for writing instruction used Pluma 1.8.1)
-Below
# Dependency library locations can be customized with:
# BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,
# BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively
replace the prescribed way to dependent on

BOOST_LIB_SUFFIX = -mt
BOOST_INCLUDE_PATH = / home / <your name> /mxe/usr/i686-w64-mingw32.static/include
BOOST_LIB_PATH = / home / <your name> /mxe/usr/i686-w64-mingw32.static/lib
BDB_INCLUDE_PATH = / home / <your name> /db-6.0.20/build_unix
BDB_LIB_PATH = // home / <your name> /db-6.0.20/build_unix
OPENSSL_INCLUDE_PATH = / home / <your name> /mxe/usr/i686-w64-mingw32.static/include
OPENSSL_LIB_PATH = / home / <your name> /mxe/usr/i686-w64-mingw32.static/lib
QRENCODE_INCLUDE_PATH = / home / <your name> /qrencode-3.4.4
QRENCODE_LIB_PATH = / home / <your name> /qrencode-3.4.4/.libs

Just change (if you have not changed)
LIBS + = -lshlwapi
genleveldb.commands = cd $$ PWD / src / leveldb && CC = $$ QMAKE_CC CXX = $$ QMAKE_CXX TARGET_OS = OS_WINDOWS_CROSSCOMPILE $ (MAKE) OPT = \ "$$ QMAKE_CXXFLAGS $$ QMAKE_CXXFLAGS_RELEASE \" libleveldb.a libmemenv.a && $ $ QMAKE_RANLIB $$ PWD / src / leveldb / libleveldb.a && $$ QMAKE_RANLIB $$ PWD / src / leveldb / libmemenv.a

on
 
LIBS + = -lshlwapi
# Genleveldb.commands = cd $$ PWD / src / leveldb && CC = $$ QMAKE_CC CXX = $$ QMAKE_CXX TARGET_OS = OS_WINDOWS_CROSSCOMPILE $ (MAKE) OPT = \ "$$ QMAKE_CXXFLAGS $$ QMAKE_CXXFLAGS_RELEASE \" libleveldb.a libmemenv.a && $$ QMAKE_RANLIB $$ PWD / src / leveldb / libleveldb.a && $$ QMAKE_RANLIB $$ PWD / src / leveldb / libmemenv.a

If the file does not contain a line CONFIG + = static, then add it.

Change
win32: QMAKE_LFLAGS ........................
on
win32: QMAKE_LFLAGS * = -Wl, - large-address-aware -static

Change
win32: QMAKE_LRELEASE = $$ [QT_INSTALL_BINS] \\ lrelease.exe
on
win32: QMAKE_LRELEASE = $$ [QT_INSTALL_BINS] / lrelease

Change
LIBS + = -lboost_system $$ BOOST_LIB_SUFFIX -lboost_filesystem $$ BOOST_LIB_SUFFIX -lboost_program_options $$ BOOST_LIB_SUFFIX -lboost_thread $$ BOOST_THREAD_LIB_SUFFIX
on
LIBS + = -lboost_system $$ BOOST_LIB_SUFFIX -lboost_filesystem $$ BOOST_LIB_SUFFIX -lboost_program_options $$ BOOST_LIB_SUFFIX -lboost_thread_win32 $$ BOOST_THREAD_LIB_SUFFIX

Change
windows: LIBS + = -lboost_chrono $$ BOOST_LIB_SUFFIX -Wl, -Bstatic -lpthread -Wl, -Bdynamic
on
windows: LIBS + = -lboost_chrono $$ BOOST_LIB_SUFFIX

Save the changes file PipCoin-qt.pro
-Open Terminal and run the following commands

Qt4 + transactional index LevelDB

export PATH = / home / <your name> / mxe / usr / bin: $ PATH
cd / home / <your name> / PipCoin
i686-w64-mingw32.static-qmake-qt4 "USE_IPV6 = 1" "USE_LEVELDB = 1" "USE_ASM = 1" PipCoin-qt.pro
make -j n -f Makefile.Release (instead of n number of cores your processor that you want to allocate to the assembly)

Qt4 + transactional index BDB

export PATH = / home / <your name> / mxe / usr / bin: $ PATH
cd / home / <your name> / PipCoin
i686-w64-mingw32.static-qmake-qt4 "USE_IPV6 = 1" "USE_ASM = 1" PipCoin-qt.pro
make -j n -f Makefile.Release (instead of n number of cores your processor that you want to allocate to the assembly)

Qt5 + transactional index LevelDB

export PATH = / home / <your name> / mxe / usr / bin: $ PATH
cd / home / <your name> / PipCoin
i686-w64-mingw32.static-qmake-qt5 "USE_IPV6 = 1" "USE_LEVELDB = 1" "USE_ASM = 1" PipCoin-qt.pro
make -j n -f Makefile.Release (instead of n number of cores your processor that you want to allocate to the assembly)

Qt5 + transactional index BDB

export PATH = / home / <your name> / mxe / usr / bin: $ PATH
cd / home / <your name> / PipCoin
i686-w64-mingw32.static-qmake-qt5 "USE_IPV6 = 1" "USE_ASM = 1" PipCoin-qt.pro
make -j n -f Makefile.Release (instead of n number of cores your processor that you want to allocate to the assembly)


If done correctly, the PipCoin-qt.exe file will be located in the folder / home / <your name> / PipCoin / release
these messages will be issued during linking:
libboost_thread_win32-mt.a (thread.o): duplicate section `.rdata $ _ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian9bad_monthEEEEE [__ ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian9bad_monthEEEEE] 'has different size
Ignore them. On the performance of the program is not affected

If you want to reduce the size of binary files,
1) Visit the website http://upx.sourceforge.net/#downloadupx
2) Download the program in accordance with your system
3) Extract the program to a folder with binary files PipCoin.
4) Type in the terminal
./upx -9 PipCoind.exe
then
./upx -9 PipCoin-qt.exe

And your PipCoind and PipCoin-qt will be less than ~ 3 times.